;; ;; In Emacs, open this file in -*- Scheme -*- mode

;; ;; Test the "letrec" expression
;; (def i 100)
;; (def i1 (int-read))

;; (@byte-write 65)

;; (if (@= i i1)
;;     (@byte-write 66)
;;     (@byte-write 63))

;; (def dec (fun (x) (@- x 1)))
;; (def inc (fun (x) (@+ x 1)))

;; (@byte-write 66)

;; (@byte-write (dec 68))
;; (@byte-write (dec))

;; (if (dec)
;;     (@byte-write (dec 68))
;;     (@byte-write 63))

;; (letrec ((fact (fun (x) (if (@= 0 x) 1 (@* x (fact (dec x)))))))
;;   (@byte-write (@- (fact 5) 55)))

;; (def app (fun (f x) (f x)))

;; (letrec ((even? (fun (x) (if (@= x 0) #t (odd?  (@- x 1)))))
;;          (odd?  (fun (x) (if (@= x 0) #f (even? (@- x 1)))))
;;          (not-even? (fun (x) (not (even? x)))))
;;   (if (not-even? 67) ;; (app not-even? 67)
;;       (@byte-write 66)
;;       (@byte-write 63)))

;; (defrec fac-acc
;;   (fun (n acc)
;;        (if (< n 2)
;;            acc
;;            (fac-acc (- n 1) (* n acc)))))

;; (def fac
;;      (fun (n)
;;           (fac-acc n 1)))

;; (if (= (fac 5) 120)
;;     (@byte-write 66)
;;     (@byte-write 63))

;; (def byte-write (fun (c) (@byte-write c)))
;; (def compose
;;      (fun (f g)
;;           (fun (x) (f (g x)))))
;; (def + (fun (x y) (@+ x y)))
;; (def succ (fun (x) (+ x 1)))
;; (def twice (fun (x) (+ x x)))
;; (byte-write ((compose succ twice) 39))
;; (byte-write ((compose succ succ) 73))
;; (byte-write ((compose twice succ) 4))

(def useless
     (fun (g x)
          (@+ x 1)))

(def dead (fun (x) x))

(useless dead 10) ;; => 11

;; A lot of code ...

(useless (@byte-write 33) 0) ;; => 1
