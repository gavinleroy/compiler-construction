;; ;; In Emacs, open this file in -*- Scheme -*- mode

;; ;; Test the "letrec" expression

;; (def * (fun (x y) (@* x y)))
;; (def + (fun (x y) (@+ x y)))
;; (def - (fun (x y) (@- x y)))

;; (def char-digit?
;;      (let ((int-0 (@char->int '0'))
;;            (int-9 (@char->int '9')))
;;        (fun (c)
;;             (let ((int-c (@char->int c)))
;;               (and (@<= int-0 int-c) (@<= int-c int-9))))))

;; (def char-digit->int
;;      (let ((int-0 (@char->int '0')))
;;        (fun (c)
;;             (@- (@char->int c) int-0))))

;; (def int->char-digit
;;      (let ((int-0 (@char->int '0')))
;;        (fun (i)
;;             (@int->char (@+ i int-0)))))

;; (def char-read
;;      (let ((read-cont-byte (fun () (@and (@byte-read) #b00111111)))
;;            (<< (fun (x y) (@shift-left x y)))
;;            (b-and (fun (x y) (@and x y)))
;;            (b-or@2 (fun (x y) (@or x y)))
;;            (b-or@3 (fun (x y z) (@or (@or x y) z)))
;;            (b-or@4 (fun (x y z t) (@or (@or x y) (@or z t))))
;;            (= (fun (x y) (@= x y))))
;;        (fun ()
;;             (let ((b0 (@byte-read)))
;;               (cond
;;                ((= -1 b0)                            ;EOF
;;                 #f)
;;                ((= 0 (b-and #b10000000 b0))          ;1 byte
;;                 (@int->char b0))
;;                ((= #b11000000 (b-and #b11100000 b0)) ;2 bytes
;;                 (let ((b1 (read-cont-byte)))
;;                   (@int->char (b-or (<< (b-and #b11111 b0) 6)
;;                                     b1))))
;;                ((= #b11100000 (b-and #b11110000 b0)) ;3 bytes
;;                 (let ((b1 (read-cont-byte))
;;                       (b2 (read-cont-byte)))
;;                   (@int->char (b-or (<< (b-and #b1111 b0) 12)
;;                                     (<< b1 6)
;;                                     b2))))
;;                (#t                                   ;4 bytes
;;                 (let ((b1 (read-cont-byte))
;;                       (b2 (read-cont-byte))
;;                       (b3 (read-cont-byte)))
;;                   (@int->char (b-or (<< (b-and #b111 b0) 18)
;;                                     (<< b1 12)
;;                                     (<< b2 6)
;;                                     b3)))))))))
;; (def int-read
;;      (letrec ((loop
;;                (fun (acc-f acc)
;;                     (let ((c (char-read)))
;;                       (if (char-digit? c)
;;                           (loop acc-f (acc-f (* acc 10) (char-digit->int c)))
;;                           acc)))))
;;        (fun ()
;;             (let ((c (char-read)))
;;               (cond ((@= c '-') (loop - 0))
;;                     ((char-digit? c) (loop + (char-digit->int c)))
;;                     (#t 0))))))

;; (def i 100)
;; (def i1 (int-read))

;; (@byte-write 65)

;; (if (@= i i1)
;;     (@byte-write 66)
;;     (@byte-write 63))

;; (def dec (fun (x) (@- x 1)))
;; (def inc (fun (x) (@+ x 1)))

;; (@byte-write 66)

;; (@byte-write (dec 68))
;; (@byte-write (dec))

;; (if (dec)
;;     (@byte-write (dec 68))
;;     (@byte-write 63))

;; (letrec ((fact (fun (x) (if (@= 0 x) 1 (@* x (fact (dec x)))))))
;;   (@byte-write (@- (fact 5) 55)))

;; (def app (fun (f x) (f x)))

;; (letrec ((even? (fun (x) (if (@= x 0) #t (odd?  (@- x 1)))))
;;          (odd?  (fun (x) (if (@= x 0) #f (even? (@- x 1)))))
;;          (not-even? (fun (x) (not (even? x)))))
;;   (if (not-even? 67) ;; (app not-even? 67)
;;       (@byte-write 66)
;;       (@byte-write 63)))


;; Create a maze that has walls everywhere
;; (defrec completeMaze-acc
;;   (fun (r c s acc)
;;        (if (< r s)
;;            (if (< c s)
;;                (let* ((rc (cell r c s))
;;                       (res1 (if (< c (- s 1))
;;                                 (list-prepend (wall-make (cell r c s) (atE rc s)) acc)
;;                                 acc))
;;                       (res2 (if (< r (- s 1))
;;                                 (list-prepend (wall-make (cell r c s) (atS rc s)) res1)
;;                                 res1)))
;;                  (completeMaze-acc r (+ c 1) s res2))
;;                (completeMaze-acc (+ r 1) 0 s acc))
;;            acc)))

;; (def completeMaze
;;      (fun (s)
;;           (completeMaze-acc 0 0 s list-empty)))

(defrec fac-acc
  (fun (n acc)
       (if (< n 2)
           acc
           (fac-acc (- n 1) (* n acc)))))

(def fac
     (fun (n)
          (fac-acc n 1)))

(if (= (fac 5) 120)
    (@byte-write 66)
    (@byte-write 63))
